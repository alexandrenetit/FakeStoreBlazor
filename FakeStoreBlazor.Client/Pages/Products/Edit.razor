@* FakeStoreBlazor.Client/Pages/Products/Edit.razor *@
@page "/products/edit/{id:int}"
@using FakeStoreBlazor.Client.Models
@using FakeStoreBlazor.Client.Services
@inject IProductService ProductService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Editar Produto - FakeStore</PageTitle>

<div class="container mt-4">
    <div class="row">
        <div class="col-md-8 mx-auto">
            <div class="card">
                <div class="card-header">
                    <h1 class="card-title mb-0">Editar Produto</h1>
                </div>
                <div class="card-body">
                    @if (isLoading)
                    {
                        <div class="d-flex justify-content-center align-items-center" style="min-height: 200px;">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Carregando...</span>
                            </div>
                        </div>
                    }
                    else if (product == null)
                    {
                        <div class="alert alert-danger" role="alert">
                            <i class="bi bi-exclamation-triangle-fill me-2"></i>
                            Produto não encontrado.
                        </div>
                        <div class="mt-3">
                            <button type="button" class="btn btn-secondary" @onclick="GoBackToProducts">
                                <i class="bi bi-arrow-left me-2"></i>Voltar aos Produtos
                            </button>
                        </div>
                    }
                    else if (hasError)
                    {
                        <div class="alert alert-danger" role="alert">
                            <i class="bi bi-exclamation-triangle-fill me-2"></i>
                            @errorMessage
                        </div>
                    }
                    else
                    {
                        <EditForm Model="@product" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit">
                            <DataAnnotationsValidator />
                            <ValidationSummary class="alert alert-danger" />

                            <div class="row">
                                <div class="col-md-12 mb-3">
                                    <label for="title" class="form-label">Título <span class="text-danger">*</span></label>
                                    <InputText id="title" @bind-Value="product.Title" class="form-control" placeholder="Digite o título do produto" />
                                    <ValidationMessage For="@(() => product.Title)" class="text-danger" />
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label for="price" class="form-label">Preço <span class="text-danger">*</span></label>
                                    <div class="input-group">
                                        <span class="input-group-text">R$</span>
                                        <InputNumber id="price" @bind-Value="product.Price" class="form-control" step="0.01" min="0" placeholder="0,00" />
                                    </div>
                                    <ValidationMessage For="@(() => product.Price)" class="text-danger" />
                                </div>

                                <div class="col-md-6 mb-3">
                                    <label for="category" class="form-label">Categoria <span class="text-danger">*</span></label>
                                    <InputText id="category" @bind-Value="product.Category" class="form-control" placeholder="Digite a categoria" />
                                    <ValidationMessage For="@(() => product.Category)" class="text-danger" />
                                </div>
                            </div>

                            <div class="mb-3">
                                <label for="description" class="form-label">Descrição</label>
                                <InputTextArea id="description" @bind-Value="product.Description" class="form-control" rows="4" placeholder="Digite a descrição do produto" />
                                <ValidationMessage For="@(() => product.Description)" class="text-danger" />
                            </div>

                            <div class="mb-3">
                                <label for="image" class="form-label">URL da Imagem</label>
                                <InputText id="image" @bind-Value="product.Image" class="form-control" placeholder="https://exemplo.com/imagem.jpg" />
                                <ValidationMessage For="@(() => product.Image)" class="text-danger" />
                                @if (!string.IsNullOrEmpty(product.Image))
                                {
                                    <div class="mt-2">
                                        <small class="form-text text-muted">Pré-visualização:</small>
                                        <div class="mt-1">
                                            <img src="@product.Image" alt="Preview" class="img-thumbnail" style="max-width: 150px; max-height: 150px;"
                                                 onerror="this.style.display='none'" />
                                        </div>
                                    </div>
                                }
                            </div>

                            <div class="form-actions d-flex justify-content-between mt-4">
                                <div>
                                    <button type="submit" class="btn btn-primary me-2" disabled="@isSaving">
                                        @if (isSaving)
                                        {
                                            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                            <span>Salvando...</span>
                                        }
                                        else
                                        {
                                            <i class="bi bi-check-circle me-2"></i>
                                            <span>Salvar Alterações</span>
                                        }
                                    </button>
                                    <button type="button" class="btn btn-secondary" @onclick="Cancel" disabled="@isSaving">
                                        <i class="bi bi-x-circle me-2"></i>Cancelar
                                    </button>
                                </div>
                                <button type="button" class="btn btn-outline-primary" @onclick="ViewDetails" disabled="@isSaving">
                                    <i class="bi bi-eye me-2"></i>Ver Detalhes
                                </button>
                            </div>
                        </EditForm>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private Product? product;
    private bool isLoading = true;
    private bool isSaving = false;
    private bool hasError = false;
    private string errorMessage = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        await LoadProduct();
    }

    private async Task LoadProduct()
    {
        try
        {
            isLoading = true;
            hasError = false;
            errorMessage = string.Empty;
            StateHasChanged();

            // Usa o ProductService em vez do HttpClient diretamente
            product = await ProductService.GetProductAsync(Id);

            if (product == null)
            {
                hasError = true;
                errorMessage = "Produto não encontrado.";
            }
        }
        catch (HttpRequestException httpEx)
        {
            hasError = true;
            errorMessage = $"Erro de conexão: {httpEx.Message}";
            Console.WriteLine($"HTTP Error loading product {Id}: {httpEx.Message}");
        }
        catch (Exception ex)
        {
            hasError = true;
            errorMessage = "Erro inesperado ao carregar o produto.";
            Console.WriteLine($"Error loading product {Id}: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task HandleValidSubmit()
    {
        if (product == null) return;

        try
        {
            isSaving = true;
            StateHasChanged();

            // Usa o ProductService para atualizar
            await ProductService.UpdateProductAsync(Id, product);

            // Mostra mensagem de sucesso
            await JSRuntime.InvokeVoidAsync("alert", "Produto atualizado com sucesso!");

            // Navega para a página de detalhes
            Navigation.NavigateTo($"/products/{Id}");
        }
        catch (HttpRequestException httpEx)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Erro de conexão: {httpEx.Message}");
            Console.WriteLine($"HTTP Error updating product {Id}: {httpEx.Message}");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Erro ao salvar as alterações. Tente novamente.");
            Console.WriteLine($"Error updating product {Id}: {ex.Message}");
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private async Task HandleInvalidSubmit()
    {
        await JSRuntime.InvokeVoidAsync("alert", "Por favor, corrija os erros no formulário antes de continuar.");
    }

    private void Cancel()
    {
        Navigation.NavigateTo($"/products/{Id}");
    }

    private void ViewDetails()
    {
        Navigation.NavigateTo($"/products/{Id}");
    }

    private void GoBackToProducts()
    {
        Navigation.NavigateTo("/products");
    }
}